#!/bin/sh

set -x

HOST_NAME="$(hostname)"
WS="/vagrant/ws/${HOST_NAME}"
mkdir -p "${WS}"

# NOTE: It seems that storlets need to chown some file to root so it
# can not be checked out in shared dir, revert to our home

cd /home/vagrant
git clone https://github.com/openstack/storlets.git

# NOTE: we need to ssh to ourself, if not ansible will fails with
# strange errors, note that there is no need to do an interactive
# TOFU, I guess because of some vagrant customization of ssh config
# Generate the key
ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -N ""
# Allow the connection from ourself
cat "${HOME}/.ssh/id_rsa.pub" >> "${HOME}/.ssh/authorized_keys"

# cd storlets
# ./s2aio.sh 1

cd ${WS};

if [ "${INSTALL_LIBERTY}" = "1" ];
then
    git clone -b stable/liberty "https://git.openstack.org/openstack-dev/devstack"
else
    git clone -b stable/mitaka "https://git.openstack.org/openstack-dev/devstack"
fi

# NOTE: see the escaping at work in the here document

cat <<EOF > ${WS}/devstack/local.conf
# See an example at:
# https://gist.github.com/dolph/72d7adf8f8e8229fb29b

[[local|localrc]]
ADMIN_PASSWORD=secrete
DATABASE_PASSWORD=\$ADMIN_PASSWORD
RABBIT_PASSWORD=\$ADMIN_PASSWORD
SERVICE_PASSWORD=\$ADMIN_PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d55
#FIXED_RANGE=172.31.1.0/24
#FLOATING_RANGE=192.168.20.0/25
HOST_IP=$HOST_PRIVATE_IP

LOGFILE=\$DEST/logs/stack.sh.log

SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5
SWIFT_REPLICAS=1
SWIFT_DATA_DIR=$DEST/data/swift

disable_all_services

disable_service c-api
disable_service c-sch
disable_service c-vol
disable_service g-api
disable_service g-lbaasv2
disable_service g-reg
disable_service glance
disable_service h-api
disable_service h-api-cfn
disable_service h-api-cw
disable_service h-eng
disable_service heat
disable_service horizon
disable_service n-net
disable_service neutron
disable_service q-agt
disable_service q-dhcp
disable_service q-l3
disable_service q-meta
disable_service q-svc
disable_service tempest

enable_service key
enable_service key-access
enable_service rabbit
enable_service mysql
enable_service s-account
enable_service s-container
enable_service s-object
enable_service s-proxy
enable_service swift

EOF

cd ${WS}/devstack; ./unstack.sh
cd ${WS}/devstack; ./stack.sh

# TODO Not in the documentation
sudo apt-get install --yes ant
sudo add-apt-repository -y ppa:webupd8team/java
sudo apt-get update
sudo echo "oracle-java8-installer shared/accepted-oracle-license-v1-1 select true" | sudo debconf-set-selections
sudo apt-get install --force-yes -y oracle-java8-installer
sudo apt-get install --force-yes -y oracle-java8-set-default
#sudo apt-get install --yes openjdk-7-jdk

#sudo apt-get install --yes ansible
sudo apt-get install -y software-properties-common
sudo apt-add-repository -y ppa:ansible/ansible
sudo apt-get update
sudo apt-get install -y ansible

# For our convenience
sudo apt-get install --yes devscripts

cd  ${HOME}/storlets
ant build


# TODO The documentation seems wrong about the path of common.yml
# mkdir -p ${HOME}/storlets/install/storlets/deploy
# cp ${HOME}/storlets/install/storlets/common.yml ${HOME}/storlets/install/storlets/deploy/common.yml

# mkdir deploy
# cp ${HOME}/storlets/install/storlets/common.yml deploy/common.yml

# Blindly trust remote host with ansible
ANSIBLE_HOST_KEY_CHECKING=False
export ANSIBLE_HOST_KEY_CHECKING

# mkdir -p /vagrant/ws/devstackstorlets

# make the 'service' tenant storlet-enabled
swift --os-username=swift --os-password=secrete --os-tenant-name=service --os-auth-url=http://127.0.0.1:5000/v2.0 post -m "storlet-enabled: True"

# create the storlet containers
swift --os-username=swift --os-password=secrete --os-tenant-name=service --os-auth-url=http://127.0.0.1:5000/v2.0 post storlet
swift --os-username=swift --os-password=secrete --os-tenant-name=service --os-auth-url=http://127.0.0.1:5000/v2.0 post dependency
swift --os-username=swift --os-password=secrete --os-tenant-name=service --os-auth-url=http://127.0.0.1:5000/v2.0 post log

cat "${HOME}/.ssh/id_rsa.pub" >> "${HOME}/.ssh/authorized_keys"

sudo apt-get install --yes python-swiftclient python-pip

cd  ${HOME}/storlets
${HOME}/storlets/install/install_ansible.sh
${HOME}/storlets/install/storlets/prepare_storlets_install.sh dev

cd ${HOME}/storlets/install/storlets/deploy
sed -i s/\"swift\"/\"vagrant\"/g cluster_config.json
sed -i s/\"test\"/\"service\"/g cluster_config.json
sed -i s/\"tester\"/\"swift\"/g cluster_config.json
sed -i s/\"testing\"/\"secrete\"/g cluster_config.json
sed -i s/\"1003\"/\"1000\"/g cluster_config.json

cd  ${HOME}/storlets/install/storlets
ansible-playbook -s -i storlets_dynamic_inventory.py cluster_check.yml
ansible-playbook -s -i storlets_dynamic_inventory.py docker_cluster.yml
ansible-playbook -s -i storlets_dynamic_inventory.py host_side_storlet_engine.yml

sed -i "s/recon object-server/recon storlet_handler object-server/g" /etc/swift/object-server/1.conf
cat <<EOF >> /etc/swift/object-server/1.conf

[filter:storlet_handler]
use = egg:storlets#storlet_handler
storlet_container = storlet
storlet_dependency = dependency
storlet_timeout = 40
storlet_gateway_module = storlet_gateway.gateways.docker:StorletGatewayDocker
storlet_gateway_conf = /etc/swift/storlet_docker_gateway.conf
storlet_execute_on_proxy_only = false
execution_server = object
EOF

sudo swift-init stop all

# if there are remaining swift processes, kill them
ps aux | grep swift- | awk '{print $2}' | xargs kill -9
sudo swift-init start main

cd  ${HOME}/storlets
sudo pip install -r test-requirements.txt
cp ./install/storlets/deploy/cluster_config.json .

annotate-output \
    ./.functests dev | \
    tee -a /vagrant/ws/devstackstorlets/test.log

